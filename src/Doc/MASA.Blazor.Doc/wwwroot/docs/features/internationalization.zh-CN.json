{
  "Order": 5,
  "Title": "国际化多语言 (i18n)",
  "Html": "<section id=\"section-1766381660\">\r\n                <h1 class=\"m-heading text-h3 text-sm-h3 mb-2\">\r\n                    <a class=\"text-decoration-none text-right text-md-left\">#</a>\r\n                    国际化多语言 (i18n)\r\n                </h1>\n<p>MASA Blazor 未来将支持组件的语言国际化（i18n）。 让您在引导应用程序时，您可以使用 current 选项指定可用的区域和当前活动的区域。</p>\n\r\n            <div class=\"mb-8\">&nbsp;</div><section id=section-1681655181>\r\n                <h2 class=\"m-heading text-h4 text-sm-h4 mb-3\">\r\n                    <a class=\"text-decoration-none text-right text-md-left\">#</a>\r\n                    语言支持\r\n                </h2>\n<p>目前MASA Blazor只支持简体中文、English，后续即将提供支持下列语言：</p>\n<ul>\n<li><strong>af</strong> - Afrikaans (Afrikaans)</li>\n<li><strong>ar</strong> - Arabic (اللغة العربية)</li>\n<li><strong>az</strong> - Azerbaijani (Azərbaycan)</li>\n<li><strong>bg</strong> - Bulgarian (български)</li>\n<li><strong>ca</strong> - Catalan (català)</li>\n<li><strong>ckb</strong> - Central Kurdish (کوردی)</li>\n<li><strong>cs</strong> - Czech (čeština)</li>\n<li><strong>de</strong> - German (Deutsch)</li>\n<li><strong>el</strong> - Greek (Ελληνικά)</li>\n<li><strong>en</strong> - English</li>\n<li><strong>es</strong> - Spanish (Español)</li>\n<li><strong>et</strong> - Estonian (eesti)</li>\n<li><strong>fa</strong> - Persian (فارسی)</li>\n<li><strong>fi</strong> - Finnish (suomi)</li>\n<li><strong>fr</strong> - French (Français)</li>\n<li><strong>he</strong> - Hebrew (עברית)</li>\n<li><strong>hr</strong> - Croatian (hrvatski jezik)</li>\n<li><strong>hu</strong> - Hungarian (magyar)</li>\n<li><strong>id</strong> - Indonesian (Indonesian)</li>\n<li><strong>it</strong> - Italian (Italiano)</li>\n<li><strong>ja</strong> - Japanese (日本語)</li>\n<li><strong>ko</strong> - Korean (한국어)</li>\n<li><strong>lt</strong> - Lithuanian (lietuvių kalba)</li>\n<li><strong>lv</strong> - Latvian (latviešu valoda)</li>\n<li><strong>nl</strong> - Dutch (Nederlands)</li>\n<li><strong>no</strong> - Norwegian (Norsk)</li>\n<li><strong>pl</strong> - Polish (język polski)</li>\n<li>**pt - Portuguese (Português)</li>\n<li><strong>ro</strong> - Romanian (Română)</li>\n<li><strong>ru</strong> - Russian (Русский)</li>\n<li><strong>sk</strong> - Slovak (slovenčina)</li>\n<li><strong>sl</strong> - Slovene (slovenski jezik)</li>\n<li><strong>srCyrl</strong> - Serbian (српски језик)</li>\n<li><strong>srLatn</strong> - Serbian (srpski jezik)</li>\n<li><strong>sv</strong> - Swedish (svenska)</li>\n<li><strong>th</strong> - Thai (ไทย)</li>\n<li><strong>tr</strong> - Turkish (Türkçe)</li>\n<li><strong>uk</strong> - Ukrainian (Українська)</li>\n<li><strong>vi</strong> - Vietnamese (Tiếng Việt)</li>\n<li><strong>zhHant</strong> - Chinese (正體中文)</li>\n</ul>\n\r\n            </section><section id=section-813742858>\r\n                <h2 class=\"m-heading text-h4 text-sm-h4 mb-3\">\r\n                    <a class=\"text-decoration-none text-right text-md-left\">#</a>\r\n                    使用MASA Blazor已内置支持的I18n功能\r\n                </h2>\n<br/>\n<h3>在Blazor Server项目中支持MasaI18n</h3>\n<br/>\n<ul>\n<li>添加服务依赖I18n:</li>\n</ul>\n<pre><code class=\"language-c#\">services.AddMasaI18nForServer(languageDirectory:&quot;{i18n local directory path}&quot;);\n</code></pre>\n<ul>\n<li><code>i18n local directory path</code>为放置i18n资源文件的文件夹物理路径。例如,您在<code>wwwroot/i18n</code>路径下放置了i18n资源文件，则代码写为<code>services.AddMasaI18nForServer(languageDirectory:&quot;wwwroot/i18n&quot;);</code>。</li>\n</ul>\n<pre><code>- Pages \n- Shared \n- wwwroot\n  - i18n\n    - en-US.json\n    - zh-CN.json\n</code></pre>\n<ul>\n<li><p>i18n资源文件格式如下：</p>\n<ul>\n<li>zh-CN.json</li>\n</ul>\n<pre><code>{\n  &quot;Home&quot;: &quot;首页&quot;,\n  &quot;Docs&quot;: &quot;文档&quot;,\n  &quot;Blog&quot;: &quot;博客&quot;,\n  &quot;Team&quot;: &quot;团队&quot;,\n  &quot;Search&quot;: &quot;搜索&quot;,\n}\n</code></pre>\n<ul>\n<li>en-US.json</li>\n</ul>\n<pre><code>{\n    &quot;Home&quot;: &quot;Home&quot;,\n    &quot;Docs&quot;: &quot;Docs&quot;,\n    &quot;Blog&quot;: &quot;Blog&quot;,\n    &quot;Team&quot;: &quot;Team&quot;,\n    &quot;Search&quot;: &quot;Search&quot;,\n}\n</code></pre>\n</li>\n<li><p>I18n使用示例</p>\n</li>\n</ul>\n<pre><code class=\"language-c#\">@inject I18n I18n\n\nvoid Example()\n{\n   I18n.SetLang(&quot;zh-CN&quot;);//将语言切换成zh-CN\n   var home = I18n.T(&quot;Home&quot;);//获取键值Home对应语言的值，此方法调用将返回&quot;首页&quot;;\n}\n</code></pre>\n<h3>如果您想在浏览器端保存用户的i18n语言配置来达到每次用户访问都可以使用之前的语言配置效果，则可增加如下操作</h3>\n<br/>\n<ul>\n<li>添加 MasaI18n 中间件：</li>\n</ul>\n<pre><code class=\"language-c#\">app.UseMasaI18n();\n</code></pre>\n<ul>\n<li>在<code>_Host.cshtml</code>中为<code>App.razor</code>组件添加<code>I18nConfig</code>参数</li>\n</ul>\n<pre><code class=\"language-c#\">@inject I18nConfig I18nConfig\n\n&lt;component type=&quot;typeof(App)&quot; param-I18nConfig=&quot;@I18nConfig&quot; render-mode=&quot;ServerPrerendered&quot; /&gt;\n</code></pre>\n<ul>\n<li>在<code>App.razor</code>组件中同步<code>I18nConfig</code>数据（在您访问blazor项目时，由于http请求是在建立blazor连接之前就已经Response（如果您在App.razor设置的是ServerPrerendered预呈现，则此次http请求会执行一次呈现Blazor的代码，将会顺带Response静态的视图给客户端,在blazor建立SignalR连接后服务端会主动再次呈现一次），所以建立blazor后容器创建的实例与http请求时创建的不是同一个实例（注意：不包含预呈现，预呈现时将会是同一个实例），因此需要两边的实例同步下数据）</li>\n</ul>\n<pre><code class=\"language-c#\">@inject I18n I18n\n@inject I18nConfig ScopI18nConfig\n\n[Parameter]\npublic I18nConfig I18nConfig { get; set; }\n\nprotected override void OnInitialized()\n{\n    ScopI18nConfig.Bind(I18nConfig);\n    I18n.SetLang(I18nConfig.Language);\n}\n</code></pre>\n<ul>\n<li>当用户切换语言时，将值赋值给<code>I18nConfig.Language</code>。比如用户将语言设置为en-US：</li>\n</ul>\n<pre><code class=\"language-c#\">I18nConfig.Language = &quot;en-US&quot;;\n</code></pre>\n<h3>在Blazor WebAssembly项目中支持MasaI18n</h3>\n<br/>\n<ul>\n<li>由于Blazor WebAssembly代码在浏览器端执行，所以需要使用http请求来读取i18n资源文件，program.cs增加代码如下：</li>\n</ul>\n<pre><code class=\"language-c#\">var builder = WebAssemblyHostBuilder.CreateDefault(args);\nawait builder.Services.AddMasaI18nForWasm(builder.HostEnvironment.BaseAddress, &quot;{i18n config file path}&quot;);\n</code></pre>\n<ul>\n<li><code>i18n config file path</code> 为i18n配置文件物理路径。例如,您在<code>wwwroot/i18n</code>路径下放置了i18n配置文件，则代码写为<code>services.AddMasaI18nForWasm(builder.HostEnvironment.BaseAddress,&quot;i18n/languageConfig.json&quot;)</code>。</li>\n</ul>\n<pre><code>- Pages \n- Shared \n- wwwroot\n  - i18n\n    - languageConfig.json\n    - en-US.json\n    - zh-CN.json\n</code></pre>\n<ul>\n<li><code>languageConfig.json</code>配置文件格式如下</li>\n</ul>\n<pre><code>{\n  &quot;DefaultLanguage&quot;: &quot;zh-CN&quot;,\n  &quot;Languages&quot;: [\n    {\n      &quot;Value&quot;: &quot;zh-CN&quot;,\n      &quot;FilePath&quot;: &quot;_content/MASA.Blazor.Doc/locale/zh-CN.json&quot;\n    },\n    {\n      &quot;Value&quot;: &quot;en-US&quot;,\n      &quot;FilePath&quot;: &quot;_content/MASA.Blazor.Doc/locale/en-US.json&quot;\n    }\n  ]\n}\n</code></pre>\n<h3>如果您想在浏览器端保存用户的i18n语言配置来达到每次用户访问都可以使用之前的语言配置效果，program.cs代码改为如下：</h3>\n<br/>\n<pre><code class=\"language-c#\">var builder = WebAssemblyHostBuilder.CreateDefault(args);\nawait builder.Services.AddMasaI18nForWasm(builder.HostEnvironment.BaseAddress, &quot;{i18n config file path}&quot;);\nbuilder.RootComponents.Add(typeof(App), &quot;#app&quot;, await builder.Services.GetMasaI18nParameter());\n\nawait builder.Build().RunAsync();\n</code></pre>\n<ul>\n<li>当用户切换语言时，将值赋值给<code>I18nConfig.Language</code>。</li>\n</ul>\n<pre><code class=\"language-c#\">@inject I18nConfig 18nConfig\n\nvoid SwitchLanguage(string language)\n{\n    I18nConfig.Language = language;\n}\n</code></pre>\n</section>"
}