[
  {
    "Title": "Button",
    "SubTitle": "按钮",
    "Type": "按钮",
    "Desc": "<p>按钮用于开始一个即时操作。</p>\n",
    "ApiDoc": "",
    "Cols": 1,
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/fNUKzY1sk/Button.svg",
    "DemoList": [
      {
        "Order": 2,
        "Name": "block",
        "Title": "块状",
        "Description": "<p>块状按钮可以扩展全部可用宽度。</p>\n",
        "Code": "<div>\r\n\t<MButton Block Color=\"secondary\">Block Button</MButton>\r\n</div>\r\n",
        "Type": "Demos.Components.Button.demo.Block",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "depressed",
        "Title": "凹陷",
        "Description": "<p>凹陷的按钮依然保持其背景色，但没有框阴影。</p>\n",
        "Code": "<MRow Align=\"center\"\r\n\t  Justify=\"space-around\">\r\n\t<MButton Depressed>\r\n\t\tNormal\r\n\t</MButton>\r\n\t<MButton Depressed Color=\"primary\">\r\n\t\tPrimary\r\n\t</MButton>\r\n\t<MButton Depressed Color=\"error\">\r\n\t\tError\r\n\t</MButton>\r\n\t<MButton Depressed Disabled>\r\n\t\tDisabled\r\n\t</MButton>\r\n</MRow>",
        "Type": "Demos.Components.Button.demo.Depressed",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "floating",
        "Title": "浮动",
        "Description": "<p>浮动按钮是圆形的，通常包含一个图标。</p>\n",
        "Code": "<div Style=\"text-align:center\">\r\n\t<MButton Style=\"margin-right: 16px\"\r\n\t\t\t Fab\r\n\t\t\t Small\r\n\t\t\t Dark\r\n\t\t\t Color=\"primary\">\r\n\t\t<MIcon>\r\n\t\t\tmdi-minus\r\n\t\t</MIcon>\r\n\t</MButton>\r\n\r\n\t<MButton Style=\"margin-right: 16px\"\r\n\t\t\t Fab\r\n\t\t\t Small\r\n\t\t\t Dark\r\n\t\t\t Color=\"pink\">\r\n\t\t<MIcon>mdi-heart</MIcon>\r\n\t</MButton>\r\n\r\n\t<MButton Style=\"margin-right: 16px\"\r\n\t\t\t Fab\r\n\t\t\t Dark\r\n\t\t\t Color=\"indigo\">\r\n\t\t<MIcon>mdi-plus</MIcon>\r\n\t</MButton>\r\n\r\n\t<MButton Style=\"margin-right: 16px\"\r\n\t\t\t Fab\r\n\t\t\t Dark\r\n\t\t\t Color=\"teal\">\r\n\t\t<MIcon>\tmdi-format-list-bulleted-square</MIcon>\r\n\t</MButton>\r\n\r\n\t<MButton Style=\"margin-right: 16px\"\r\n\t\t\t Fab\r\n\t\t\t Dark\r\n\t\t\t Large\r\n\t\t\t Color=\"cyan\">\r\n\t\t<MIcon>mdi-pencil</MIcon>\r\n\t</MButton>\r\n\r\n\t<MButton Style=\"margin-right: 16px\"\r\n\t\t\t Fab\r\n\t\t\t Dark\r\n\t\t\t Large\r\n\t\t\t Color=\"purple\">\r\n\t\t<MIcon>\r\n\t\t\tmdi-android\r\n\t\t</MIcon>\r\n\t</MButton>\r\n</div>\r\n",
        "Type": "Demos.Components.Button.demo.Floating",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "icon",
        "Title": "图标",
        "Description": "<p>图标可作为按钮的主要内容。此属性使按钮变圆并应用文本属性样式。</p>\n",
        "Code": "<MContainer Fluid>\r\n\t<MRow>\r\n\t\t<MCol Span=\"3\">\r\n\t\t\t<MButton Icon Color=\"pink\">\r\n\t\t\t\t<MIcon>mdi-heart</MIcon>\r\n\t\t\t</MButton>\r\n\t\t</MCol>\r\n\t\t<MCol Span=\"3\">\r\n\t\t\t<MButton Icon Color=\"indigo\">\r\n\t\t\t\t<MIcon>mdi-star</MIcon>\r\n\t\t\t</MButton>\r\n\t\t</MCol>\r\n\t\t<MCol Span=\"3\">\r\n\t\t\t<MButton Icon Color=\"green\">\r\n\t\t\t\t<MIcon>mdi-cached</MIcon>\r\n\t\t\t</MButton>\r\n\t\t</MCol>\r\n\t\t<MCol Span=\"3\">\r\n\t\t\t<MButton Icon Color=\"deep-orange\">\r\n\t\t\t\t<MIcon>mdi-thumb-up</MIcon>\r\n\t\t\t</MButton>\r\n\t\t</MCol>\r\n\t</MRow>\r\n\t<MRow>\r\n\t\t<MCol Span=\"3\">\r\n\t\t\t<MButton Icon Disabled>\r\n\t\t\t\t<MIcon>mdi-heart</MIcon>\r\n\t\t\t</MButton>\r\n\t\t</MCol>\r\n\t\t<MCol Span=\"3\">\r\n\t\t\t<MButton Icon Disabled>\r\n\t\t\t\t<MIcon>mdi-star</MIcon>\r\n\t\t\t</MButton>\r\n\t\t</MCol>\r\n\t\t<MCol Span=\"3\">\r\n\t\t\t<MButton Icon Disabled>\r\n\t\t\t\t<MIcon>mdi-cached</MIcon>\r\n\t\t\t</MButton>\r\n\t\t</MCol>\r\n\t\t<MCol Span=\"3\">\r\n\t\t\t<MButton Icon Disabled>\r\n\t\t\t\t<MIcon>mdi-thumb-up</MIcon>\r\n\t\t\t</MButton>\r\n\t\t</MCol>\r\n\t</MRow>\r\n</MContainer>\r\n",
        "Type": "Demos.Components.Button.demo.Icon",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "loaders",
        "Title": "加载",
        "Description": "<p>使用加载道具，可以通知用户正在进行处理。默认行为是使用v-progress-circular组件，但这可以自定义。</p>\n",
        "Code": "<div style=\"text-align:center\">\r\n\t<MButton Style=\"margin-right: 8px\"\r\n\t\t\tLoadingFragment=\"LoadingFragment\"\r\n\t\t\t Loading=\"loading\"\r\n\t\t\t Disabled=\"loading\"\r\n\t\t\t Color=\"secondary\"\r\n\t\t\t Click=\"OnClick\">\r\n\t\tAccept Terms\r\n\t</MButton>\r\n\r\n\t<MButton Style=\"margin-right: 8px\"\r\n\t\t\t LoadingFragment=\"LoadingFragment\"\r\n\t\t\t Loading=\"loading2\"\r\n\t\t\t Disabled=\"loading2\"\r\n\t\t\t Color=\"blue-grey\"\r\n\t\t\t Click=\"OnClick2\">\r\n\t\tUpload\r\n\t\t<MIcon Right Dark>\r\n\t\t\tmdi-cloud-upload\r\n\t\t</MIcon>\r\n\t</MButton>\r\n\r\n\t<MButton Style=\"margin-right: 8px\"\r\n\t\t\t LoadingFragment=\"LoadingTemplate\"\r\n\t\t\t Loading=\"loading3\"\r\n\t\t\t Disabled=\"loading3\"\r\n\t\t\t Color=\"success\"\r\n\t\t\t Click=\"OnClick3\">\r\n\t\tCustom Loader\r\n\t</MButton>\r\n\r\n\t<MButton Style=\"margin-right: 8px\"\r\n\t\t\t LoadingFragment=\"LoadingTemplate4\"\r\n\t\t\t Loading=\"loading4\"\r\n\t\t\t Disabled=\"loading4\"\r\n\t\t\t Color=\"info\"\r\n\t\t\t Click=\"OnClick4\">\r\n\t\tIcon Loader\r\n\t</MButton>\r\n\r\n\t<MButton LoadingFragment=\"LoadingFragment\"\r\n\t\t\t Loading=\"loading5\"\r\n\t\t\t Disabled=\"loading5\"\r\n\t\t\t Color=\"blue-grey\"\r\n\t\t\t Fab\r\n\t\t\t Click=\"OnClick5\">\r\n\t\t<MIcon Dark>\r\n\t\t\tmdi-cloud-upload\r\n\t\t</MIcon>\r\n\t</MButton>\r\n</div>\r\n\r\n@code {\r\n\tprivate RenderFragment LoadingFragment =\r\n\t@<MProcessCircular Indeterminate Size=\"23\"></MProcessCircular>\r\n\t;\r\n\r\n\tprivate RenderFragment LoadingTemplate =\r\n\t@<span>Loading...</span>\r\n\t;\r\n\r\n\tprivate RenderFragment LoadingTemplate4 =\r\n\t@<span class=\"custom-loader\"><MIcon>mdi-cached</MIcon></span>\r\n\t;\r\n\r\n\tprivate bool loading = false;\r\n\tprivate void OnClick()\r\n\t{\r\n\t\tloading = true;\r\n\t\tTask.Run(async () =>\r\n\t\t{\r\n\t\t\tawait Task.Delay(1000);\r\n\t\t\tloading = false;\r\n\t\t\tawait InvokeAsync(StateHasChanged);\r\n\t\t});\r\n\t}\r\n\r\n\tprivate bool loading2 = false;\r\n\tprivate void OnClick2()\r\n\t{\r\n\t\tloading2 = true;\r\n\t\tTask.Run(async () =>\r\n\t\t{\r\n\t\t\tawait Task.Delay(1000);\r\n\t\t\tloading2 = false;\r\n\t\t\tawait InvokeAsync(StateHasChanged);\r\n\t\t});\r\n\t}\r\n\r\n\tprivate bool loading3 = false;\r\n\tprivate void OnClick3()\r\n\t{\r\n\t\tloading3 = true;\r\n\t\tTask.Run(async () =>\r\n\t\t{\r\n\t\t\tawait Task.Delay(1000);\r\n\t\t\tloading3 = false;\r\n\t\t\tawait InvokeAsync(StateHasChanged);\r\n\t\t});\r\n\t}\r\n\r\n\tprivate bool loading4 = false;\r\n\tprivate void OnClick4()\r\n\t{\r\n\t\tloading4 = true;\r\n\t\tTask.Run(async () =>\r\n\t\t{\r\n\t\t\tawait Task.Delay(1000);\r\n\t\t\tloading4 = false;\r\n\t\t\tawait InvokeAsync(StateHasChanged);\r\n\t\t});\r\n\t}\r\n\r\n\tprivate bool loading5 = false;\r\n\tprivate void OnClick5()\r\n\t{\r\n\t\tloading5 = true;\r\n\t\tTask.Run(async () =>\r\n\t\t{\r\n\t\t\tawait Task.Delay(1000);\r\n\t\t\tloading5 = false;\r\n\t\t\tawait InvokeAsync(StateHasChanged);\r\n\t\t});\r\n\t}\r\n}\r\n\r\n<style>\r\n\t.custom-loader {\r\n\t\tanimation: loader 1s infinite;\r\n\t\tdisplay: flex;\r\n\t}\r\n\r\n\t@(\"@-moz-keyframes\") loader {\r\n\t\tfrom {\r\n\t\ttransform: rotate(0);\r\n\t\t}\r\n\r\n\t\tto {\r\n\t\ttransform: rotate(360deg);\r\n\t\t}\r\n\t}\r\n\r\n\t@(\"@-webkit-keyframes\") loader {\r\n\t\tfrom {\r\n\t\ttransform: rotate(0);\r\n\t\t}\r\n\r\n\t\tto {\r\n\t\ttransform: rotate(360deg);\r\n\t\t}\r\n\t}\r\n\r\n\t@(\"@-o-keyframes\") loader {\r\n\t\tfrom {\r\n\t\ttransform: rotate(0);\r\n\t\t}\r\n\r\n\t\tto {\r\n\t\ttransform: rotate(360deg);\r\n\t\t}\r\n\t}\r\n\r\n\t@(\"@keyframes\") loader {\r\n\t\tfrom {\r\n\t\ttransform: rotate(0);\r\n\t\t}\r\n\r\n\t\tto {\r\n\t\ttransform: rotate(360deg);\r\n\t\t}\r\n\t}\r\n</style>\r\n",
        "Type": "Demos.Components.Button.demo.Loaders",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "normal",
        "Title": "默认",
        "Description": "<p>凸起的按钮有一个会在在点击时加重的框阴影，这是默认的样式。</p>\n",
        "Code": "<MRow Align=\"center\"\r\n\t  Justify=\"space-around\">\r\n\t<MButton>\r\n\t\tNormal\r\n\t</MButton>\r\n\t<MButton Color=\"primary\">\r\n\t\tPrimary\r\n\t</MButton>\r\n\t<MButton Color=\"error\">\r\n\t\tError\r\n\t</MButton>\r\n\t<MButton Disabled>\r\n\t\tDisabled\r\n\t</MButton>\r\n</MRow>",
        "Type": "Demos.Components.Button.demo.Normal",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "outlined",
        "Title": "轮廓",
        "Description": "<p>轮廓按钮从应用的当前颜色继承其边框。</p>\n",
        "Code": "<div style=\"text-align:center\">\r\n\t<MButton Style=\"margin-right: 8px\"\r\n\t\t\t Outlined\r\n\t\t\t Color=\"indigo\">\r\n\t\tOutlined Button\r\n\t</MButton>\r\n\t<MButton Style=\"margin-right: 8px\"\r\n\t\t\t Outlined\r\n\t\t\t Fab\r\n\t\t\t Color=\"teal\">\r\n\t\t<MIcon>mdi-format-list-bulleted-square</MIcon>\r\n\t</MButton>\r\n\t<MButton Style=\"margin-right: 8px\"\r\n\t\t\t Outlined\r\n\t\t\t Large\r\n\t\t\t Fab\r\n\t\t\t Color=\"indigo\">\r\n\t\t<MIcon>mdi-pencil</MIcon>\r\n\t</MButton>\r\n</div>",
        "Type": "Demos.Components.Button.demo.Outlined",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 7,
        "Name": "plain",
        "Title": "普通",
        "Description": "<p>普通按钮具有较低的基线不透明度，可以对悬停和聚焦做出反应。</p>\n",
        "Code": "<div style=\"text-align:center\">\r\n\t<MButton Disabled\r\n\t\t\t Style=\"margin-right: 8px\"\r\n\t\t\t Color=\"grey\"\r\n\t\t\t Plain>\r\n\t\tCancel\r\n\t</MButton>\r\n\r\n\t<MButton Style=\"margin-right: 8px\"\r\n\t\t\t Color=\"error\"\r\n\t\t\t Plain>\r\n\t\tDelete\r\n\t</MButton>\r\n</div>\r\n",
        "Type": "Demos.Components.Button.demo.Plain",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 8,
        "Name": "rounded",
        "Title": "圆角",
        "Description": "<p>圆形按钮的行为与常规按钮相同，但具有圆形边缘。</p>\n",
        "Code": "<div style=\"text-align: center\">\r\n\t<MButton Rounded Color=\"primary\">Rounded Button</MButton>\r\n</div>\r\n",
        "Type": "Demos.Components.Button.demo.Rounded",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 9,
        "Name": "size",
        "Title": "大小",
        "Description": "<p>可以为按钮提供不同的大小调整选项，以适应多种场景。</p>\n",
        "Code": "<MContainer Fluid>\r\n\t<MRow Align=\"center\">\r\n\t\t<MCol Span=\"6\">\r\n\t\t\t<div style=\"text-align: center\">\r\n\t\t\t\t<div style=\"margin-bottom:8px\">\r\n\t\t\t\t\t<MButton XSmall Color=\"secondary\">XSmall Button</MButton>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div style=\"margin-bottom:8px\">\r\n\t\t\t\t\t<MButton Small Color=\"primary\">Small Button</MButton>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div style=\"margin-bottom:8px\">\r\n\t\t\t\t\t<MButton Color=\"warning\">Normal Button</MButton>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div style=\"margin-bottom:8px\">\r\n\t\t\t\t\t<MButton Large Color=\"error\">Large Button</MButton>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div style=\"margin-bottom:8px\">\r\n\t\t\t\t\t<MButton XLarge Color=\"success\">XLarge Button</MButton>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</MCol>\r\n\t\t<MCol Span=\"6\">\r\n\t\t\t<div style=\"text-align: center\">\r\n\t\t\t\t<div style=\"margin-bottom:8px\">\r\n\t\t\t\t\t<MButton XSmall Fab Color=\"secondary\">\r\n\t\t\t\t\t\t<MIcon>mdi-television</MIcon>\r\n\t\t\t\t\t</MButton>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div style=\"margin-bottom:8px\">\r\n\t\t\t\t\t<MButton Small Fab Color=\"primary\">\r\n\t\t\t\t\t\t<MIcon>mdi-pencil</MIcon>\r\n\t\t\t\t\t</MButton>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div style=\"margin-bottom:8px\">\r\n\t\t\t\t\t<MButton Fab Color=\"warning\">\r\n\t\t\t\t\t\t<MIcon>mdi-account-circle</MIcon>\r\n\t\t\t\t\t</MButton>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div style=\"margin-bottom:8px\">\r\n\t\t\t\t\t<MButton Large Fab Color=\"error\">\r\n\t\t\t\t\t\t<MIcon>mdi-alarm</MIcon>\r\n\t\t\t\t\t</MButton>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div style=\"margin-bottom:8px\">\r\n\t\t\t\t\t<MButton XLarge Fab Color=\"success\">\r\n\t\t\t\t\t\t<MIcon>mdi-domain</MIcon>\r\n\t\t\t\t\t</MButton>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</MCol>\r\n\t</MRow>\r\n</MContainer>",
        "Type": "Demos.Components.Button.demo.Size",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 10,
        "Name": "text",
        "Title": "文本",
        "Description": "<p>文本按钮没有框阴影和背景。只在悬停时显示按钮的容器。与颜色属性一起使用时，提供的颜色将应用于按钮文本而不是背景。</p>\n",
        "Code": "<MRow Align=\"center\" Justify=\"space-around\">\r\n\t<MButton Text>\r\n\t\tNormal\r\n\t</MButton>\r\n\t<MButton Text Color=\"primary\">\r\n\t\tPrimary\r\n\t</MButton>\r\n\t<MButton Text Color=\"error\">\r\n\t\tError\r\n\t</MButton>\r\n\t<MButton Text Disabled>\r\n\t\tDisabled\r\n\t</MButton>\r\n</MRow>\r\n",
        "Type": "Demos.Components.Button.demo.Text",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 11,
        "Name": "tile",
        "Title": "平铺",
        "Description": "<p>平铺按钮的行为与常规按钮相同，但没有边框半径。</p>\n",
        "Code": "<MRow Align=\"center\"\r\n\t  Justify=\"space-around\">\r\n\t<MButton Tile Color=\"success\">\r\n\t\t<MIcon Left>mdi-pencil</MIcon>\r\n\t\tEdit\r\n\t</MButton>\r\n</MRow>",
        "Type": "Demos.Components.Button.demo.Tile",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Card",
    "SubTitle": "卡片",
    "Type": "卡片",
    "Desc": "<p>MCard 组件是一个可用于从面板到静态图像的多功能组件。 卡 组件有许多帮助程序组件来尽可能简单地进行标记。 没有列出选项的组件使用Vue的功能组件来更快渲染并充当标记糖以使建筑变得更加容易。</p>\n",
    "ApiDoc": "",
    "Cols": 1,
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/rrwbSt3FQ/Icon.svg",
    "DemoList": [
      {
        "Order": 0,
        "Name": "basic",
        "Title": "基本",
        "Description": "<p>MCard 基本用法</p>\n",
        "Code": "<MCard Style=\"width:300px;\">\r\n\t<Cover> <img alt=\"example\" src=\"https://cdn.vuetifyjs.com/images/cards/cooking.png\" /> </Cover>\r\n\t<Title> <span>Card title</span> </Title>\r\n\t<SubTitle> <span>Subtitle text</span> </SubTitle>\r\n\t<Text>  <p>Greyhound divisively hello coldly wonderfully marginally far upon excluding. </p> </Text>\r\n\t<Actions>\r\n\t\t<MButton Text Color=\"primary\">\r\n\t\t\t<MIcon Small>fas fa-edit</MIcon>\r\n\t\t\tedit\r\n\t\t</MButton>\r\n\t\t<MButton Text Color=\"primary\">\r\n\t\t\t<MIcon Small>fas fa-share-square</MIcon>\r\n\t\t\tshare\r\n\t\t</MButton>\r\n\t</Actions>\r\n</MCard>",
        "Type": "Demos.Components.Card.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "Outlined",
        "Title": "轮廓",
        "Description": "<p>An outlined card has 0 elevation and contains a soft border.</p>\n",
        "Code": "<MCard Outlined Style=\"width:300px;\">\r\n\t<Title> <span>Card title</span> </Title>\r\n\t<SubTitle> <span>Subtitle text</span> </SubTitle>\r\n\t<Text>  <p>Greyhound divisively hello coldly wonderfully marginally far upon excluding. </p> </Text>\r\n\t<Actions>\r\n\t\t<MButton Text Color=\"primary\">\r\n\t\t\t<MIcon Small>fas fa-edit</MIcon>\r\n\t\t\tedit\r\n\t\t</MButton>\r\n\t\t<MButton Text Color=\"primary\">\r\n\t\t\t<MIcon Small>fas fa-share-square</MIcon>\r\n\t\t\tshare\r\n\t\t</MButton>\r\n\t</Actions>\r\n</MCard>",
        "Type": "Demos.Components.Card.demo.Outlined",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "Weather",
        "Title": "天气",
        "Description": "<p>使用v-list-items和v-slider，我们能够创建唯一的气象卡。 列表组件确保我们具有一致的间距和功能，而滑块组件使我们能够为用户提供有用的选择界面。</p>\n",
        "Code": "<MCard Style=\"width:400px;\">\r\n\t<Text>\r\n\t\t<MListItem TwoLine>\r\n\t\t\t<MListItemContent>\r\n\t\t\t\t<MListItemTitle class=\"headline\">\r\n\t\t\t\t\tSan Francisco\r\n\t\t\t\t</MListItemTitle>\r\n\t\t\t\t<MListItemTitle>Mon, 12:30 PM, Mostly sunny</MListItemTitle>\r\n\t\t\t</MListItemContent>\r\n\t\t</MListItem>\r\n\t\t<MListItem>\r\n\t\t\t<MRow Align=\"center\">\r\n\t\t\t\t<MCol cols=\"6\">\r\n\t\t\t\t\t  <h1 class=\"display-1\">23&deg;C</h1>\t\t\r\n\t\t\t\t</MCol>\r\n\t\t\t\t<MCol cols=\"6\">\r\n\t\t\t\t\t<img src=\"https://cdn.vuetifyjs.com/images/cards/sun.png\"  />\r\n\t\t\t\t</MCol>\r\n\t\t\t</MRow>\r\n\t\t</MListItem>\r\n\t\t<MListItem>\r\n\t\t\t<MListItemIcon>\r\n\t\t\t\t<MIcon>mdi-send</MIcon>\r\n\t\t\t</MListItemIcon>\r\n\t\t\t<MListItemTitle>23 km/h</MListItemTitle>\r\n\t\t</MListItem>\r\n\t\t<MListItem>\r\n\t\t\t<MListItemIcon>\r\n\t\t\t\t<MIcon>mdi-cloud-download</MIcon>\r\n\t\t\t</MListItemIcon>\r\n\t\t\t<MListItemTitle>48%</MListItemTitle>\r\n\t\t</MListItem>\r\n\t\t<MList>\r\n\t\t\t<MListItem>\r\n\t\t\t\t<MListItemTitle>Tuesday</MListItemTitle>\r\n\t\t\t\t<MListItemIcon>\r\n\t\t\t\t\t<MIcon>mdi-white-balance-sunny</MIcon>\r\n\t\t\t\t</MListItemIcon>\r\n\t\t\t\t<MListItemTitle> 23&deg;C </MListItemTitle>\r\n\t\t\t</MListItem>\r\n\t\t\t<MListItem>\r\n\t\t\t\t<MListItemTitle>Wednesday</MListItemTitle>\r\n\t\t\t\t<MListItemIcon>\r\n\t\t\t\t\t<MIcon>mdi-white-balance-sunny</MIcon>\r\n\t\t\t\t</MListItemIcon>\r\n\t\t\t\t<MListItemTitle> 26&deg;C </MListItemTitle>\r\n\t\t\t</MListItem>\r\n\t\t\t<MListItem>\r\n\t\t\t\t<MListItemTitle>Thursday</MListItemTitle>\r\n\t\t\t\t<MListItemIcon>\r\n\t\t\t\t\t<MIcon>mdi-cloud</MIcon>\r\n\t\t\t\t</MListItemIcon>\r\n\t\t\t\t<MListItemTitle> 25&deg;C </MListItemTitle>\r\n\t\t\t</MListItem>\r\n\t\t</MList>\r\n\t</Text>\r\n\t<Actions>\r\n\t\t<MButton Text Color=\"primary\" Block>\r\n\t\t\tFull Report\r\n\t\t</MButton>\r\n\t</Actions>\r\n</MCard>",
        "Type": "Demos.Components.Card.demo.Weather",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Grid",
    "SubTitle": "网格",
    "Type": "网格",
    "Desc": "<p>MASA.Blazor 配备了一个使用 flexbox 构建的 12 格网格系统。 网格用于在应用的内容中创建特定的布局。 它包含 5 种类型的媒体断点，用于针对特定的屏幕尺寸或方向，xs、sm、md、lg 和 xl。 这些分辨率在视口断点表中定义如下，可以通过自定义断点进行修改。</p>\n<h2>Material Design 断点</h2>\n<table>\n<thead>\n<tr>\n<th>设备</th>\n<th>代码</th>\n<th>类型</th>\n<th>像素范围</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Extra small (超小号)</td>\n<td><strong>xs</strong></td>\n<td>小型号到大型号的手机</td>\n<td>&lt; 600px</td>\n</tr>\n<tr>\n<td>Small (小号)</td>\n<td><strong>sm</strong></td>\n<td>小型号到中型号的平板</td>\n<td>600px &gt; &lt; 960px</td>\n</tr>\n<tr>\n<td>Medium (中号)</td>\n<td><strong>md</strong></td>\n<td>大型号平板到手提电脑</td>\n<td>960px &gt; &lt; 1264px*</td>\n</tr>\n<tr>\n<td>Large (大号)</td>\n<td><strong>lg</strong></td>\n<td>桌面端</td>\n<td>1264px &gt; &lt; 1904px*</td>\n</tr>\n<tr>\n<td>Extra large (超大号)</td>\n<td><strong>xl</strong></td>\n<td>4K 和超宽屏幕</td>\n<td>&gt; 1904px*</td>\n</tr>\n</tbody>\n</table>\n<p>桌面端上浏览器滚动条的宽度为 * -16px</p>\n",
    "ApiDoc": "",
    "Cols": 1,
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/5rWLU27so/Grid.svg",
    "DemoList": [
      {
        "Order": 0,
        "Name": "basic",
        "Title": "基础栅格",
        "Description": "<p>从堆叠到水平排列。</p>\n<p>使用单一的一组 <code>Row</code> 和 <code>Col</code> 栅格组件，就可以创建一个基本的栅格系统，所有列（Col）必须放在 <code>Row</code> 内。</p>\n",
        "Code": "<div>\r\n    <MRow>\r\n        <MCol Span=\"24\">MCol-24</MCol>   \r\n    </MRow>\r\n    <MRow>\r\n        <MCol Span=\"12\">MCol-12</MCol>\r\n        <MCol Span=\"12\">MCol-12</MCol>\r\n    </MRow>\r\n    <MRow>\r\n        <MCol Span=\"8\">MCol-8</MCol>\r\n        <MCol Span=\"8\">MCol-8</MCol>\r\n        <MCol Span=\"8\">MCol-8</MCol>\r\n    </MRow>\r\n    <MRow>\r\n        <MCol Span=\"6\">MCol-6</MCol>\r\n        <MCol Span=\"6\">MCol-6</MCol>\r\n        <MCol Span=\"6\">MCol-6</MCol>\r\n        <MCol Span=\"6\">MCol-6</MCol>\r\n    </MRow>\r\n</div>\r\n",
        "Type": "Demos.Components.Grid.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "flex-align",
        "Title": "垂直对齐",
        "Description": "<p>使用 align 和 align-self 属性来改变 flex 项目及其父项的垂直对齐方式。</p>\n",
        "Code": "<div>\r\n    <Divider Orientation=\"left\">Align Top</Divider>\r\n    <MRow Align=\"start\">\r\n        <MCol Span=\"3\">\r\n            @DemoBox((100, \"MCol-3\"))\r\n        </MCol>\r\n        <MCol Span=\"3\">\r\n            @DemoBox((50, \"MCol-3\"))\r\n        </MCol>\r\n        <MCol Span=\"3\">\r\n            @DemoBox((120, \"MCol-3\"))\r\n        </MCol>\r\n        <MCol Span=\"3\">\r\n            @DemoBox((80, \"MCol-3\"))\r\n        </MCol>\r\n    </MRow>\r\n\r\n    <Divider Orientation=\"left\">Align Middle</Divider>\r\n    <MRow  Align=\"center\">\r\n        <MCol Span=\"3\">\r\n            @DemoBox((100, \"MCol-3\"))\r\n        </MCol>\r\n        <MCol Span=\"3\">\r\n            @DemoBox((50, \"MCol-3\"))\r\n        </MCol>\r\n        <MCol Span=\"3\">\r\n            @DemoBox((120, \"MCol-3\"))\r\n        </MCol>\r\n        <MCol Span=\"3\">\r\n            @DemoBox((80, \"MCol-3\"))\r\n        </MCol>\r\n    </MRow>\r\n\r\n    <Divider Orientation=\"left\">Align Bottom</Divider>\r\n    <MRow Align=\"end\">\r\n        <MCol Span=\"3\">\r\n            @DemoBox((100, \"MCol-3\"))\r\n        </MCol>\r\n        <MCol Span=\"3\">\r\n            @DemoBox((50, \"MCol-3\"))\r\n        </MCol>\r\n        <MCol Span=\"3\">\r\n            @DemoBox((120, \"MCol-3\"))\r\n        </MCol>\r\n        <MCol Span=\"3\">\r\n            @DemoBox((80, \"MCol-3\"))\r\n        </MCol>\r\n    </MRow>\r\n</div>\r\n\r\n<style>\r\n    #components-grid-demo-flex-align [class~='row'] {\r\n        background: rgba(128, 128, 128, 0.08);\r\n    }\r\n    #components-grid-demo-flex-align [class~='col'] p {\r\n        background: rgba(0, 161, 255, 1);\r\n    }\r\n</style>\r\n\r\n@code{\r\n    RenderFragment<(int value, string children)> DemoBox = props =>@<p style=\"@($\"height: {props.value}px\")\">@props.children</p>;\r\n}\r\n",
        "Type": "Demos.Components.Grid.demo.FlexAlign",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "flex-order",
        "Title": "排序",
        "Description": "<p>通过 <code>order</code> 来改变元素的排序。</p>\n",
        "Code": "<div>\r\n    <Divider Orientation=\"left\">Normal</Divider>\r\n    <Row>\r\n        <Col Span=\"6\" Order=\"4\">\r\n        1 col-order-4\r\n        </Col>\r\n        <Col Span=\"6\" Order=\"3\">\r\n        2 col-order-3\r\n        </Col>\r\n        <Col Span=\"6\" Order=\"2\">\r\n        3 col-order-2\r\n        </Col>\r\n        <Col Span=\"6\" Order=\"1\">\r\n        4 col-order-1\r\n        </Col>\r\n    </Row>\r\n    <Divider Orientation=\"left\">Responsive</Divider>\r\n    <Row>\r\n        <Col Span=\"6\" Xs=\"new AntDesign.EmbeddedProperty{ Order= 1 }\" Sm=\"new AntDesign.EmbeddedProperty{ Order= 2 }\" Md=\"new AntDesign.EmbeddedProperty{ Order= 3 }\" Lg=\"new AntDesign.EmbeddedProperty{ Order= 4 }\">\r\n        1 col-order-responsive\r\n        </Col>\r\n        <Col Span=\"6\" Xs=\"new AntDesign.EmbeddedProperty{ Order= 2 }\"  Sm=\"new AntDesign.EmbeddedProperty{ Order= 1 }\"  Md=\"new AntDesign.EmbeddedProperty{ Order= 4 }\"  Lg=\"new AntDesign.EmbeddedProperty{ Order= 3 }\" >\r\n        2 col-order-responsive\r\n        </Col>\r\n        <Col Span=\"6\" Xs=\"new AntDesign.EmbeddedProperty{ Order= 3 }\"  Sm=\"new AntDesign.EmbeddedProperty{ Order= 4 }\"  Md=\"new AntDesign.EmbeddedProperty{ Order= 2 }\"  Lg=\"new AntDesign.EmbeddedProperty{ Order= 1 }\" >\r\n        3 col-order-responsive\r\n        </Col>\r\n        <Col Span=\"6\" Xs=\"new AntDesign.EmbeddedProperty{ Order= 4 }\"  Sm=\"new AntDesign.EmbeddedProperty{ Order= 3 }\"  Md=\"new AntDesign.EmbeddedProperty{ Order= 1 }\"  Lg=\"new AntDesign.EmbeddedProperty{ Order= 2 }\" >\r\n        4 col-order-responsive\r\n        </Col>\r\n    </Row>\r\n</div>\r\n\r\n<style>\r\n    #components-grid-demo-flex-order [class~='ant-row'] {\r\n        background: rgba(128, 128, 128, 0.08);\r\n    }\r\n</style>",
        "Type": "Demos.Components.Grid.demo.FlexOrder",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 7,
        "Name": "flex-stretch",
        "Title": "Flex 填充",
        "Description": "<p>Col 提供 <code>flex</code> 属性以支持填充。</p>\n",
        "Code": "<div>\r\n    <Divider Orientation=\"left\">Percentage columns</Divider>\r\n    <Row>\r\n        <Col Flex=\"2\">2 / 5</Col>\r\n        <Col Flex=\"3\">3 / 5</Col>\r\n    </Row>\r\n    <Divider Orientation=\"left\">Fill rest</Divider>\r\n    <Row>\r\n        <Col Flex=@(\"100px\")>100px</Col>\r\n        <Col Flex=@(\"auto\")>Fill Rest</Col>\r\n    </Row>\r\n    <Divider Orientation=\"left\">Raw flex style</Divider>\r\n    <Row>\r\n        <Col Flex=@(\"1 1 200px\")>1 1 200px</Col>\r\n        <Col Flex=@(\"0 1 300px\")>0 1 300px</Col>\r\n    </Row>\r\n\r\n    <Row Wrap=\"false\">\r\n        <Col Flex=@(\"none\")>\r\n        <div style=\"padding: 0 16px\">none</div>\r\n        </Col>\r\n        <Col Flex=@(\"auto\")>auto with no-wrap</Col>\r\n    </Row>\r\n</div>",
        "Type": "Demos.Components.Grid.demo.FlexStretch",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "flex",
        "Title": "排版",
        "Description": "<p>布局基础。</p>\n<p>子元素根据不同的值 <code>start</code>,<code>center</code>,<code>end</code>,<code>space-between</code>,<code>space-around</code>，分别定义其在父节点里面的排版方式。</p>\n",
        "Code": "<div>\r\n    <Divider Orientation=\"left\">sub-element align left</Divider>\r\n    <Row Justify=\"start\">\r\n        <Col Span=\"4\">col-4</Col>\r\n        <Col Span=\"4\">col-4</Col>\r\n        <Col Span=\"4\">col-4</Col>\r\n        <Col Span=\"4\">col-4</Col>\r\n    </Row>\r\n\r\n    <Divider Orientation=\"left\">sub-element align center</Divider>\r\n    <Row Justify=\"center\">\r\n        <Col Span=\"4\">col-4</Col>\r\n        <Col Span=\"4\">col-4</Col>\r\n        <Col Span=\"4\">col-4</Col>\r\n        <Col Span=\"4\">col-4</Col>\r\n    </Row>\r\n\r\n    <Divider Orientation=\"left\">sub-element align right</Divider>\r\n    <Row Justify=\"end\">\r\n        <Col Span=\"4\">col-4</Col>\r\n        <Col Span=\"4\">col-4</Col>\r\n        <Col Span=\"4\">col-4</Col>\r\n        <Col Span=\"4\">col-4</Col>\r\n    </Row>\r\n\r\n\r\n    <Divider Orientation=\"left\">sub-element monospaced arrangement</Divider>\r\n    <Row Justify=\"space-between\">\r\n        <Col Span=\"4\">col-4</Col>\r\n        <Col Span=\"4\">col-4</Col>\r\n        <Col Span=\"4\">col-4</Col>\r\n        <Col Span=\"4\">col-4</Col>\r\n    </Row>\r\n\r\n\r\n    <Divider Orientation=\"left\">sub-element align full</Divider>\r\n    <Row Justify=\"space-around\">\r\n        <Col Span=\"4\">col-4</Col>\r\n        <Col Span=\"4\">col-4</Col>\r\n        <Col Span=\"4\">col-4</Col>\r\n        <Col Span=\"4\">col-4</Col>\r\n    </Row>\r\n</div>\r\n\r\n<style>\r\n    #components-grid-demo-flex [class~='ant-row'] {\r\n        background: rgba(128, 128, 128, 0.08);\r\n    }\r\n</style>",
        "Type": "Demos.Components.Grid.demo.Flex",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "gutter",
        "Title": "区块间隔",
        "Description": "<p>栅格常常需要和间隔进行配合，你可以使用 <code>Row</code> 的 <code>gutter</code> 属性，我们推荐使用 <code>(16+8n)px</code> 作为栅格间隔(n 是自然数)。</p>\n<p>如果要支持响应式，可以写成 <code>{ xs: 8, sm: 16, md: 24, lg: 32 }</code>。</p>\n<p>如果需要垂直间距，可以写成数组形式 <code>[水平间距, 垂直间距]</code> <code>[16, { xs: 8, sm: 16, md: 24, lg: 32 }]</code>。</p>\n",
        "Code": "@{\r\n    string style=\"background: #0092ff; padding: 8px 0;\";\r\n    Dictionary<string, int> gutter = new()\r\n    {\r\n        [\"xs\"] = 8,\r\n        [\"sm\"] = 16,\r\n        [\"md\"] = 24,\r\n        [\"lg\"] = 32,\r\n        [\"xl\"] = 48,\r\n        [\"xxl\"] = 64\r\n    };\r\n}\r\n<div>\r\n    <Divider Orientation=\"left\">Horizontal</Divider>\r\n    <MRow Gutter=\"16\">\r\n        <MCol Class=\"gutter-MRow\" Span=\"6\">\r\n            <div style=\"@style\">col-6</div>\r\n        </MCol>\r\n        <MCol Class=\"gutter-MRow\" Span=\"6\">\r\n            <div style=\"@style\">col-6</div>\r\n        </MCol>\r\n        <MCol Class=\"gutter-MRow\" Span=\"6\">\r\n            <div style=\"@style\">col-6</div>\r\n        </MCol>\r\n        <MCol Class=\"gutter-MRow\" Span=\"6\">\r\n            <div style=\"@style\">col-6</div>\r\n        </MCol>\r\n    </MRow>\r\n    <Divider Orientation=\"left\">Responsive</Divider>\r\n    <MRow Gutter=\"@gutter\">\r\n        <MCol Class=\"gutter-MRow\" Span=\"6\">\r\n            <div style=\"@style\">col-6</div>\r\n        </MCol>\r\n        <MCol Class=\"gutter-MRow\" Span=\"6\">\r\n            <div style=\"@style\">col-6</div>\r\n        </MCol>\r\n        <MCol Class=\"gutter-MRow\" Span=\"6\">\r\n            <div style=\"@style\">col-6</div>\r\n        </MCol>\r\n        <MCol Class=\"gutter-MRow\" Span=\"6\">\r\n            <div style=\"@style\">col-6</div>\r\n        </MCol>\r\n    </MRow>\r\n    <Divider Orientation=\"left\">Vertical</Divider>\r\n    <MRow Gutter=\"(16,24)\">\r\n        <MCol Class=\"gutter-MRow\" Span=\"6\">\r\n            <div style=\"@style\">col-6</div>\r\n        </MCol>\r\n        <MCol Class=\"gutter-MRow\" Span=\"6\">\r\n            <div style=\"@style\">col-6</div>\r\n        </MCol>\r\n        <MCol Class=\"gutter-MRow\" Span=\"6\">\r\n            <div style=\"@style\">col-6</div>\r\n        </MCol>\r\n        <MCol Class=\"gutter-MRow\" Span=\"6\">\r\n            <div style=\"@style\">col-6</div>\r\n        </MCol>\r\n        <MCol Class=\"gutter-MRow\" Span=\"6\">\r\n            <div style=\"@style\">col-6</div>\r\n        </MCol>\r\n        <MCol Class=\"gutter-MRow\" Span=\"6\">\r\n            <div style=\"@style\">col-6</div>\r\n        </MCol>\r\n        <MCol Class=\"gutter-MRow\" Span=\"6\">\r\n            <div style=\"@style\">col-6</div>\r\n        </MCol>\r\n        <MCol Class=\"gutter-MRow\" Span=\"6\">\r\n            <div style=\"@style\">col-6</div>\r\n        </MCol>\r\n    </MRow>\r\n\r\n</div>\r\n\r\n<style>\r\n    .gutter-box {\r\n        padding: 8px 0;\r\n        background: #00a0e9;\r\n    }\r\n</style>\r\n",
        "Type": "Demos.Components.Grid.demo.Gutter",
        "Style": "\n[data-theme=\"dark\"] .gutter-box {\n  background: #028ac8;\n}\n\n",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "offset",
        "Title": "左右偏移",
        "Description": "<p>列偏移。</p>\n<p>使用 <code>offset</code> 可以将列向右侧偏。例如，<code>offset={4}</code> 将元素向右侧偏移了 4 个列（column）的宽度。</p>\n",
        "Code": "<div>\r\n    <Row>\r\n        <Col Span=\"8\">\r\n            col-8\r\n        </Col>\r\n        <Col Span=\"8\" Offset=\"8\">\r\n            col-8\r\n        </Col>\r\n    </Row>\r\n    <Row>\r\n        <Col Span=\"6\" Offset=\"6\">\r\n            col-6 col-offset-6\r\n        </Col>\r\n        <Col Span=\"6\" Offset=\"6\">\r\n            col-6 col-offset-6\r\n        </Col>\r\n    </Row>\r\n    <Row>\r\n        <Col Span=\"12\" Offset=\"6\">\r\n            col-12 col-offset-6\r\n        </Col>\r\n    </Row>\r\n</div>\r\n@code{\r\n\r\n}",
        "Type": "Demos.Components.Grid.demo.Offset",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 10,
        "Name": "playground",
        "Title": "栅格配置器",
        "Description": "<p>可以简单配置几种等分栅格和间距。</p>\n",
        "Code": "<div>\r\nTo do   \r\n</div>\r\n",
        "Type": "Demos.Components.Grid.demo.Playground",
        "Style": "\n[data-theme=\"dark\"] #components-grid-demo-playground [class~='ant-col'] > div {\n  background: #028ac8;\n}\n\n",
        "Debug": false
      },
      {
        "Order": 9,
        "Name": "responsive-more",
        "Title": "其他属性的响应式",
        "Description": "<p><code>span</code> <code>pull</code> <code>push</code> <code>offset</code> <code>order</code> 属性可以通过内嵌到 <code>xs</code> <code>sm</code> <code>md</code> <code>lg</code> <code>xl</code> <code>xxl</code> 属性中来使用。</p>\n<p>其中 <code>xs={6}</code> 相当于 <code>xs={{ span: 6 }}</code>。</p>\n",
        "Code": "<Row>\r\n    <Col Xs=\"@Property(5,1)\" Lg=\"@Property(6,2)\">\r\n      Col\r\n    </Col>\r\n    <Col Xs=\"@Property(11,1)\" Lg=\"@Property(6,2)\">\r\n      Col\r\n    </Col>\r\n    <Col Xs=\"@Property(5,1)\" Lg=\"@Property(6,2)\">\r\n      Col\r\n    </Col>\r\n</Row>\r\n\r\n@code{ AntDesign.EmbeddedProperty Property(int span, int offset) => new() { Span = span, Offset = offset }; }",
        "Type": "Demos.Components.Grid.demo.ResponsiveMore",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 8,
        "Name": "responsive",
        "Title": "响应式布局",
        "Description": "<p>参照 Bootstrap 的 <a href=\"http://getbootstrap.com/css/#grid-media-queries\">响应式设计</a>，预设六个响应尺寸：<code>xs</code> <code>sm</code> <code>md</code> <code>lg</code> <code>xl</code>\u00A0<code>xxl</code>。</p>\n",
        "Code": "<Row>\r\n    <Col Xs=\"2\" Sm=\"4\" Md=\"6\" Lg=\"8\" Xl=\"10\">\r\n      Col\r\n    </Col>\r\n    <Col Xs=\"20\" Sm=\"16\" Md=\"12\" Lg=\"8\" Xl=\"4\">\r\n      Col\r\n    </Col>\r\n    <Col Xs=\"2\" Sm=\"4\" Md=\"6\" Lg=\"8\" Xl=\"10\">\r\n      Col\r\n    </Col>\r\n</Row>\r\n\r\n",
        "Type": "Demos.Components.Grid.demo.Responsive",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "sort",
        "Title": "栅格排序",
        "Description": "<p>列排序。</p>\n<p>通过使用 <code>push</code> 和 <code>pull</code> 类就可以很容易的改变列（column）的顺序。</p>\n",
        "Code": "<div>\r\n    <Row>\r\n        <Col Span=\"18\" Push=\"6\">\r\n            col-18 col-push-6\r\n        </Col>\r\n        <Col Span=\"6\" Pull=\"18\">\r\n            col-6 col-pull-18\r\n        </Col>\r\n    </Row>\r\n</div>\r\n",
        "Type": "Demos.Components.Grid.demo.Sort",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 10,
        "Name": "useBreakpoint",
        "Title": "监听 Breakpoint",
        "Description": "<p>使用 <code>OnBreakpoint</code> 事件个性化布局。</p>\n",
        "Code": "<Row OnBreakpoint=\"HandleBreakpoint\">\r\n    Current break point: @current?.Name\r\n    @foreach (var type in types)\r\n    {\r\n        if (type.Width < current?.Width)\r\n        {\r\n            <Tag Color=\"blue\">@type.Name</Tag>\r\n        }\r\n    }\r\n</Row>\r\n\r\n@code{\r\n\r\n    AntDesign.BreakpointType[] types = new[] { AntDesign.BreakpointType.Xxl, AntDesign.BreakpointType.Xl, AntDesign.BreakpointType.Lg, AntDesign.BreakpointType.Md, AntDesign.BreakpointType.Sm, AntDesign.BreakpointType.Xs };\r\n\r\n    AntDesign.BreakpointType current;\r\n\r\n    void HandleBreakpoint(AntDesign.BreakpointType breakpoint)\r\n    {\r\n        current = breakpoint;\r\n    }\r\n}",
        "Type": "Demos.Components.Grid.demo.UseBreakpoint",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Icon",
    "SubTitle": "图标",
    "Type": "图标",
    "Desc": "<p>语义化的矢量图形。</p>\n",
    "ApiDoc": "",
    "Cols": 1,
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/rrwbSt3FQ/Icon.svg",
    "DemoList": [
      {
        "Order": 0,
        "Name": "basic",
        "Title": "基本用法",
        "Description": "<p>支持 <code>Material Icons</code>、<code>Material Design Icons</code>、<code>Font Awesome 5</code>图标库。</p>\n",
        "Code": "<div>\r\n\t<MIcon>home</MIcon>\r\n\t<MIcon>mdi-home</MIcon>\r\n\t<MIcon>fas fa-home</MIcon>\r\n</div>\r\n",
        "Type": "Demos.Components.Icon.demo.Basic",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Nav",
    "SubTitle": "导航",
    "Type": "导航",
    "Desc": "<h2>Navigation drawers（导航抽屉）</h2>\n<p>v-navigation-drawer 是您的用户用于导航应用程序的组件。 导航抽屉被预先配置为可以在有或没有 vue-router 的情况下使用。 为了显示的目的，一些示例被包装在 v-card 元素中。 在您的应用程序中，通常会把 v-navigation-drawer 组件作为 v-app 的直接子组件。</p>\n",
    "ApiDoc": "",
    "Cols": 1,
    "Cover": "https://gw.alipayobjects.com/zos/alicdn/5rWLU27so/Nav.svg",
    "DemoList": [
      {
        "Order": 0,
        "Name": "basic",
        "Title": "基础导航",
        "Description": "<p>导航抽屉主要用于存放您应用程序中页面的链接。 使用 null 作为其 v-model 的初始值 将会将抽屉初始化为在移动设备上关闭，在桌面环境下打开。 通常使用 nav 属性将抽屉与 v-list 组件配对。</p>\n",
        "Code": "<MNavCard Height=\"400\" Width=\"256\">\r\n    <MNavigationDrawer>\r\n        <MListItem>\r\n            <MListItemContent>\r\n                <MListItemTitle>\r\n                    Application\r\n                </MListItemTitle>\r\n            </MListItemContent>\r\n        </MListItem>\r\n\r\n        <MDivider></MDivider>\r\n\r\n        <MList>\r\n            <MListItem>\r\n                <MListItemIcon>\r\n                    <MIcon>home</MIcon>\r\n                </MListItemIcon>\r\n                <MListItemContent>\r\n                    <MListItemTitle>1</MListItemTitle>\r\n                </MListItemContent>\r\n            </MListItem>\r\n            <MListItem>\r\n                <MListItemIcon>\r\n                    <MIcon>dashboard</MIcon>\r\n                </MListItemIcon>\r\n                <MListItemContent>\r\n                    <MListItemTitle>2</MListItemTitle>\r\n                </MListItemContent>\r\n            </MListItem>\r\n            <MListItem>\r\n                <MListItemIcon>\r\n                    <MIcon>shopping_bag</MIcon>\r\n                </MListItemIcon>\r\n                <MListItemContent>\r\n                    <MListItemTitle>3</MListItemTitle>\r\n                </MListItemContent>\r\n            </MListItem>\r\n        </MList>\r\n    </MNavigationDrawer>\r\n</MNavCard>\r\n\r\n\r\n\r\n",
        "Type": "Demos.Components.Nav.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "Temporary",
        "Title": "临时的",
        "Description": "<h3>临时的</h3>\n<p>临时抽屉位于它的应用程序上方，并使用一个scrim（覆盖层）使背景变暗。 在移动设备上默认模拟此抽屉行为。 在抽屉外点击将导致它关闭。</p>\n",
        "Code": "<div class=\"overflow-hidden\" style=\"height:400px;position:relative;\">\r\n    <MContainer>\r\n        <MRow Align=\"center\" Justify=\"center\">\r\n            <button @onclick=\"Toggle\">toggle</button>\r\n        </MRow>\r\n    </MContainer>\r\n\r\n    <MNavigationDrawer Temporary=\"true\" Absolute=\"true\" Drawer=\"_drawer\">\r\n        <MListItem>\r\n            <MListItemContent>\r\n                <MListItemTitle>\r\n                    Application\r\n                </MListItemTitle>\r\n            </MListItemContent>\r\n        </MListItem>\r\n\r\n        <MDivider></MDivider>\r\n\r\n        <MList>\r\n            <MListItem>\r\n                <MListItemIcon>\r\n                    <MIcon>home</MIcon>\r\n                </MListItemIcon>\r\n                <MListItemContent>\r\n                    <MListItemTitle>1</MListItemTitle>\r\n                </MListItemContent>\r\n            </MListItem>\r\n            <MListItem>\r\n                <MListItemIcon>\r\n                    <MIcon>dashboard</MIcon>\r\n                </MListItemIcon>\r\n                <MListItemContent>\r\n                    <MListItemTitle>2</MListItemTitle>\r\n                </MListItemContent>\r\n            </MListItem>\r\n            <MListItem>\r\n                <MListItemIcon>\r\n                    <MIcon>shopping_bag</MIcon>\r\n                </MListItemIcon>\r\n                <MListItemContent>\r\n                    <MListItemTitle>3</MListItemTitle>\r\n                </MListItemContent>\r\n            </MListItem>\r\n        </MList>\r\n    </MNavigationDrawer>\r\n</div>\r\n\r\n@code{\r\n    private bool _drawer;\r\n\r\n    public void Toggle(MouseEventArgs args)\r\n    {\r\n        _drawer = !_drawer;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
        "Type": "Demos.Components.Nav.demo.Temporary",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "ProcessCircular",
    "SubTitle": "进度环",
    "Type": "进度环",
    "Desc": "<p>该组件用于将数据环传递给用户。 也可以将其置于不确定状态来描述加载。</p>\n",
    "ApiDoc": "",
    "Cols": 1,
    "DemoList": [
      {
        "Order": 0,
        "Name": "basic",
        "Title": "基本用法",
        "Description": "<p>默认情况下，Progress Circular使用应用程序的辅助颜色。</p>\n",
        "Code": "<div>\r\n\t<MProcessCircular Indeterminate></MProcessCircular>\r\n</div>\r\n",
        "Type": "Demos.Components.ProcessCircular.demo.Basic",
        "Style": "",
        "Debug": false
      }
    ]
  }
]